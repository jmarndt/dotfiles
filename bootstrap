#!/bin/bash

RESET="\033[0m"
DEFAULT="\033[39m"
BOLD="\033[1m"
RED="\033[91m"
GREEN="\033[92m"
OS=""

echo -e "
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░██████╗░░█████╗░████████╗███████╗██╗██╗░░░░░███████╗███████╗░░
░░██╔══██╗██╔══██╗╚══██╔══╝██╔════╝██║██║░░░░░██╔════╝██╔════╝░░
░░██║░░██║██║░░██║░░░██║░░░█████╗░░██║██║░░░░░█████╗░░███████╗░░
░░██║░░██║██║░░██║░░░██║░░░██╔══╝░░██║██║░░░░░██╔══╝░░░╚═══██╗░░
░░██████╔╝╚█████╔╝░░░██║░░░██║░░░░░██║███████╗███████╗███████║░░
░░╚═════╝░░╚════╝░░░░╚═╝░░░╚═╝░░░░░╚═╝╚══════╝╚══════╝╚══════╝░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

This script will bootstrap a new system and install dotfiles
See https://github.com/jmarndt/dotfiles for more details
"

printf "$BOLD"
read -p "Continue with bootstrap? [Y/n]: " run_bs
printf "$RESET\n"
[[ $run_bs = *n* || $run_bs = *N* ]] && exit 5

print_msg() {
    printf "$GREEN$1\n"
    printf "░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░$RESET\n\n"
}

macos_verify_terminal() {
    if ! plutil -lint /Library/Preferences/com.apple.TimeMachine.plist >/dev/null ; then
        printf "$BOLD$RED""WARNING: Full Disk Access Required!$RESET\n\n"
        printf "Open $BOLD$GREEN""Prefernces > Privacy & Security > Full Disk Access$RESET and enable Terminal\n"
        printf "Then quit Terminal and re-run this script\n\n"
        open "x-apple.systempreferences:com.apple.preference.security?Privacy_AllFiles"
        exit 1
    fi
}

macos_install_xcode_clt() {
    print_msg "Installing Xcode Command Line Tools..."
    xcode-select -p &> /dev/null
    if [ $? -ne 0 ]; then
        touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress;
        PROD=$(softwareupdate -l | grep "\*.*Command Line" | tail -n 1 | sed 's/^[^C]* //')
        softwareupdate -i "$PROD" --verbose;
    fi
}

macos_settings() {
    defaults write com.apple.desktopservices DSDontWriteNetworkStores true
    defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
    defaults write com.apple.TextEdit RichText 0
    defaults write com.apple.TextEdit CorrectSpellingAutomatically 0
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true
    defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
    defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true
    defaults write com.apple.LaunchServices LSQuarantine -bool false
    defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
    defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
    defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay -int 0
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true
    defaults write com.apple.finder ShowStatusBar -bool true
    defaults write com.apple.finder ShowPathbar -bool true
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
    defaults write com.apple.finder _FXSortFoldersFirst -bool true
    defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"
    defaults write com.apple.dock tilesize -int 16
    defaults write com.apple.dock minimize-to-application -bool true
    defaults write com.apple.dock show-process-indicators -bool true
    defaults write com.apple.dock mru-spaces -bool false
    defaults write com.apple.dock show-recents -bool false
    defaults write com.apple.Safari UniversalSearchEnabled -bool false
    defaults write com.apple.Safari SuppressSearchSuggestions -bool true
    defaults write com.apple.Safari IncludeDevelopMenu -bool true
    defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
    defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true
    defaults write NSGlobalDomain WebKitDeveloperExtras -bool true
    defaults write com.apple.Safari WebAutomaticSpellingCorrectionEnabled -bool false
    defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true
    defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true
    defaults write com.apple.addressbook ABShowDebugMenu -bool true
    defaults write com.apple.DiskUtility DUDebugMenuEnabled -bool true
    defaults write com.apple.DiskUtility advanced-image-options -bool true
    defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true
    defaults write com.apple.SoftwareUpdate AutomaticDownload -int 0
    defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1
}

check_os() {
    [ -f /etc/os-release ] && source /etc/os-release
    [[ $PRETTY_NAME = *Debian* ]] && OS="debian"
	if [[ $OSTYPE = 'darwin'* ]]; then
        OS="mac"
        macos_verify_terminal
        macos_install_xcode_clt
        macos_settings
    fi
    [[ $OS != "debian" && $OS != "mac" ]] && exit 2
}

generate_ssh_keys() {
    print_msg "Generating SSH keys..."
    SSH_KEY_PATH=~/.ssh/id_ed25519
    if [ ! -f $SSH_KEY_PATH ]; then
        ssh-keygen -t ed25519 -N "" -f $SSH_KEY_PATH
    fi
}

configure_work_git() {
    print_msg "Configuring work directory..."
    WORK_DIR_PATH=~/work
    if [ ! -d $WORK_DIR_PATH ]; then
        read -p 'Enter work email: ' work_email
        echo $work_email
        mkdir $WORK_DIR_PATH
        printf "[user]\n  email = replace@me.com\n" > $WORK_DIR_PATH/.gitconfig
    fi
}

install_homebrew() {
    print_msg "Installing Homebrew & packages..."
    if test ! $(which brew); then
        BREW_FILE="Brewfile"
        NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        curl https://raw.githubusercontent.com/jmarndt/dotfiles/master/$BREW_FILE --output ./$BREW_FILE.bootstrap
        brew bundle install --file ./$BREW_FILE.bootstrap
        rm ./$BREW_FILE.bootstrap
        rm ./$BREW_FILE.bootstrap.lock.json
    fi
}

install_aptitude() {
    # below is only simulation for now
    apt install -s $(cat aptpackages)
}

install_basic_software() {
    [[ $OS = "mac" ]] && install_homebrew
    [[ $OS = "debian" ]] && install_aptitude 
}

install_dotfiles() {
    print_msg "Installing dotfiles..."
    DOTFILES_DIR_PATH=~/dotfiles
    if [ ! -d $DOTFILES_DIR_PATH ]; then
        git clone https://github.com/jmarndt/dotfiles.git $DOTFILES_DIR_PATH
        /bin/bash $DOTFILES_DIR_PATH/install
    fi
}

install_dev_tools() {
    print_msg "Installing dev tools..."
    NVM_DIR_PATH=~/.nvm
    if [ ! -d $NVM_DIR_PATH ]; then
        mkdir $NVM_DIR_PATH
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/HEAD/install.sh)"
        [ -s "$NVM_DIR_PATH/nvm.sh" ] && \. "$NVM_DIR_PATH/nvm.sh"
        nvm install --lts
        npm install -g @angular/cli
        npm install -g typescript
        npm install -g ts-node
    fi
}

bootstrap() {
    print_msg "Starting bootstrap..."
    check_os
    generate_ssh_keys
    install_basic_software
    install_dotfiles
    install_dev_tools
    configure_work_git
    print_msg "Bootstrap complete"
}

bootstrap
